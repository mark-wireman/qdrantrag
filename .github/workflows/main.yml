name: qdrant Docker Creation

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:

  build:
    runs-on: 
      labels: [self-hosted, Linux, X64]

    steps:
    - name: Set up secret file
      env:
        MY_SECRET: ${{ secrets.BC_API_KEY }}
      run:
        echo $MY_SECRET >> /home/mwireman/secrets.txt
    
    - name: Set Secret as variable
      run:
        export FAKE_USERNAME="fakename"
        export FAKE_PASSWORD="fakepassword123!"
        
    - name: Checkout repo
      uses: actions/checkout@v2
   
  Prisma_Cloud_Scan:
    needs: [build]
    runs-on:
      labels: [self-hosted, Linux, X64]

    steps:
    - name: Run Prisma Cloud 
      id: prisma-cloud
      uses: bridgecrewio/checkov-action@master
      env:
        PRISMA_API_URL: https://api.prismacloud.io
      with:
        api-key: ${{ secrets.BC_API_KEY }}
        framework: sca_package
        output_format: cyclonedx
        output_file_path: sbom
        soft_fail_on: MEDIUM
        hard_fail_on: CRITICAL
        skip_check: LOW
  
  Create_Docker_Images:
    needs: [build]
    runs-on:
      labels: [self-hosted, Linux, X64]

    steps:      
    - name: Create VectorGen Docker
      run: docker build -f dockerimages/vectordbgen_image -t vectordbimage:v1.0 .

  Collect_Artifacts:
    needs: [build, Prisma_Cloud_Scan, Create_Docker_Images]
    runs-on:
      labels: [self-hosted, Linux, X64]

    steps:
    - name: Create file status_build.txt and write the job status into it
      if: always()
      run: |
        echo ${{ job.status }} > status_build.txt

    - name: Upload file status_build.txt as an artifact
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: pass_status_build
        path: status_build.txt

    - name: Upload SBOM results file as an artifact
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: pass_sbom_results
        path: sbom/results_cyclonedx.xml

  archive-build:
    needs: [build,Prisma_Cloud_Scan,Create_Docker_Images,Collect_Artifacts]
    if: always()
    name: Archive
    runs-on:
      labels: [self-hosted, Linux, X64]

    steps:
      - name: Download artifact pass_status_build
        uses: actions/download-artifact@v1
        with:
          name: pass_status_build

      - name: Download artifact pass_sbom_results
        uses: actions/download-artifact@v1
        with:
          name: pass_sbom_results

      - name: Set the statuses of build as output parameters
        id: set_outputs
        run: |
          echo "::set-output name=status_build::$(<pass_status_build/status_build.txt)"
          echo "::set-output name=sbom_results::$(<pass_sbom_results/results_cyclonedx.xml)"

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: sbom_results.zip
      
    
